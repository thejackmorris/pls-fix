// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccessRole {
  OWNER
  EDITOR
  COMMENTER
  VIEWER
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  name              String?
  subjects          Subject[]
  discussions       Discussion[]
  comments          Comment[]
  permissions       SubjectPermission[]
  collections       Collection[]
  following         UserRelationship[] @relation("Following")
  followers         UserRelationship[] @relation("Followers")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Subject {
  id                String    @id @default(cuid())
  title             String
  content           String
  url               String?
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  discussion        Discussion?
  permissions       SubjectPermission[]
  tags              Tag[]
  collections       Collection[]
  isPrivate         Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Discussion {
  id                String    @id @default(cuid())
  subjectId         String    @unique
  subject           Subject   @relation(fields: [subjectId], references: [id])
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  comments          Comment[]
  startIndex        Int
  endIndex          Int
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Comment {
  id                String    @id @default(cuid())
  content           String
  startIndex        Int
  endIndex          Int
  discussionId      String
  discussion        Discussion @relation(fields: [discussionId], references: [id])
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  parentId          String?
  parent            Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies           Comment[] @relation("CommentReplies")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Collection {
  id                String    @id @default(cuid())
  name              String
  description       String?
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  subjects          Subject[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model UserRelationship {
  id                String    @id @default(cuid())
  followerId        String
  follower          User      @relation("Followers", fields: [followerId], references: [id])
  followingId       String
  following         User      @relation("Following", fields: [followingId], references: [id])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@unique([followerId, followingId])
}

model SubjectPermission {
  id                String    @id @default(cuid())
  subjectId         String
  subject           Subject   @relation(fields: [subjectId], references: [id])
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  role              AccessRole
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@unique([subjectId, userId])
}

model Tag {
  id                String    @id @default(cuid())
  name              String
  subjects          Subject[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccessRole {
  OWNER
  EDITOR
  COMMENTER
  VIEWER
}

model User {
  id                String               @id @default(cuid())
  email             String               @unique
  name              String?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  subjects          Subject[]            @relation("UserSubjects")
  discussions       Discussion[]         @relation("UserDiscussions")
  comments          Comment[]            @relation("UserComments")
  collections       Collection[]         @relation("UserCollections")
  followers         UserRelationship[]   @relation("UserFollowers")
  following         UserRelationship[]   @relation("UserFollowing")
  subjectPermissions SubjectPermission[]
}

model Subject {
  id          String       @id @default(cuid())
  title       String
  content     String // The actual text content
  url         String? // Optional source URL
  isPrivate   Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  user        User         @relation("UserSubjects", fields: [userId], references: [id])
  discussions Discussion[]
  collections Collection[] @relation("CollectionSubjects")
  permissions SubjectPermission[]
  tags        Tag[]        @relation("SubjectTags")
}

model Discussion {
  id         String    @id @default(cuid())
  startIndex Int // Where in the text this discussion starts
  endIndex   Int // Where in the text this discussion ends
  snippet    String // The actual text snippet being discussed
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  subjectId  String
  userId     String
  subject    Subject   @relation(fields: [subjectId], references: [id])
  user       User      @relation("UserDiscussions", fields: [userId], references: [id])
  comments   Comment[]
}

model Comment {
  id           String     @id @default(cuid())
  content      String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  discussionId String
  userId       String
  discussion   Discussion @relation(fields: [discussionId], references: [id])
  user         User       @relation("UserComments", fields: [userId], references: [id])
  parentId     String?
  parent       Comment?   @relation("CommentReplies", fields: [parentId], references: [id])
  replies      Comment[]  @relation("CommentReplies")
}

model Collection {
  id          String    @id @default(cuid())
  name        String
  description String?
  isPrivate   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation("UserCollections", fields: [userId], references: [id])
  subjects    Subject[] @relation("CollectionSubjects")
}

model UserRelationship {
  id           String   @id @default(cuid())
  followerId   String
  followingId  String
  createdAt    DateTime @default(now())
  follower     User     @relation("UserFollowers", fields: [followerId], references: [id])
  following    User     @relation("UserFollowing", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model SubjectPermission {
  id        String      @id @default(cuid())
  subjectId String
  userId    String
  role      AccessRole  @default(VIEWER)
  subject   Subject     @relation(fields: [subjectId], references: [id])
  user      User        @relation(fields: [userId], references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@unique([subjectId, userId])
}

model Tag {
  id          String    @id @default(cuid())
  name        String    @unique
  createdAt   DateTime  @default(now())
  subjects    Subject[] @relation("SubjectTags")
}
